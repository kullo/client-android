// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from api.djinni

package net.kullo.libkullo.api;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class MasterKey {
    /** Returns PEM formatted key */
    public abstract String pem();

    /** Returns the key as 16 blocks of 6 digits each */
    public abstract ArrayList<String> dataBlocks();

    public abstract boolean isEqualTo(MasterKey other);

    /** Returns null if pem is not well-formed */
    public static native MasterKey createFromPem(String pem);

    /** Returns null if dataBlocks is not well-formed */
    public static native MasterKey createFromDataBlocks(ArrayList<String> dataBlocks);

    /**
     * Validates a single block.
     * A block string is valid iff it contains exactly 6 digits
     * and fulfills the Luhn mod10 requirements
     */
    public static native boolean isValidBlock(String block);

    private static final class CppProxy extends MasterKey
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public String pem()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_pem(this.nativeRef);
        }
        private native String native_pem(long _nativeRef);

        @Override
        public ArrayList<String> dataBlocks()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_dataBlocks(this.nativeRef);
        }
        private native ArrayList<String> native_dataBlocks(long _nativeRef);

        @Override
        public boolean isEqualTo(MasterKey other)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isEqualTo(this.nativeRef, other);
        }
        private native boolean native_isEqualTo(long _nativeRef, MasterKey other);
    }
}
