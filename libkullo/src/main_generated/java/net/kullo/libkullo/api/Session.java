// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from session.djinni

package net.kullo.libkullo.api;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Session {
    @NonNull
    public abstract UserSettings userSettings();

    @NonNull
    public abstract Conversations conversations();

    @NonNull
    public abstract Messages messages();

    @NonNull
    public abstract MessageAttachments messageAttachments();

    @NonNull
    public abstract Senders senders();

    @NonNull
    public abstract Drafts drafts();

    @NonNull
    public abstract DraftAttachments draftAttachments();

    @NonNull
    public abstract Syncer syncer();

    @NonNull
    public abstract AsyncTask accountInfoAsync(@NonNull SessionAccountInfoListener listener);

    @NonNull
    public abstract AsyncTask registerPushToken(@NonNull PushToken token);

    @NonNull
    public abstract AsyncTask unregisterPushToken(@NonNull PushToken token);

    /** Notify the session of events. Only call this from the UI thread! */
    @NonNull
    public abstract ArrayList<Event> notify(@NonNull InternalEvent internalEvent);

    private static final class CppProxy extends Session
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public UserSettings userSettings()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_userSettings(this.nativeRef);
        }
        private native UserSettings native_userSettings(long _nativeRef);

        @Override
        public Conversations conversations()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_conversations(this.nativeRef);
        }
        private native Conversations native_conversations(long _nativeRef);

        @Override
        public Messages messages()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_messages(this.nativeRef);
        }
        private native Messages native_messages(long _nativeRef);

        @Override
        public MessageAttachments messageAttachments()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_messageAttachments(this.nativeRef);
        }
        private native MessageAttachments native_messageAttachments(long _nativeRef);

        @Override
        public Senders senders()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_senders(this.nativeRef);
        }
        private native Senders native_senders(long _nativeRef);

        @Override
        public Drafts drafts()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_drafts(this.nativeRef);
        }
        private native Drafts native_drafts(long _nativeRef);

        @Override
        public DraftAttachments draftAttachments()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_draftAttachments(this.nativeRef);
        }
        private native DraftAttachments native_draftAttachments(long _nativeRef);

        @Override
        public Syncer syncer()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_syncer(this.nativeRef);
        }
        private native Syncer native_syncer(long _nativeRef);

        @Override
        public AsyncTask accountInfoAsync(SessionAccountInfoListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_accountInfoAsync(this.nativeRef, listener);
        }
        private native AsyncTask native_accountInfoAsync(long _nativeRef, SessionAccountInfoListener listener);

        @Override
        public AsyncTask registerPushToken(PushToken token)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_registerPushToken(this.nativeRef, token);
        }
        private native AsyncTask native_registerPushToken(long _nativeRef, PushToken token);

        @Override
        public AsyncTask unregisterPushToken(PushToken token)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_unregisterPushToken(this.nativeRef, token);
        }
        private native AsyncTask native_unregisterPushToken(long _nativeRef, PushToken token);

        @Override
        public ArrayList<Event> notify(InternalEvent internalEvent)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_notify(this.nativeRef, internalEvent);
        }
        private native ArrayList<Event> native_notify(long _nativeRef, InternalEvent internalEvent);
    }
}
