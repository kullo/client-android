// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from messages.djinni

package net.kullo.libkullo.api;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Senders {
    public abstract String name(long msgId);

    public abstract Address address(long msgId);

    public abstract String organization(long msgId);

    public abstract String avatarMimeType(long msgId);

    public abstract byte[] avatar(long msgId);

    private static final class CppProxy extends Senders
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public String name(long msgId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_name(this.nativeRef, msgId);
        }
        private native String native_name(long _nativeRef, long msgId);

        @Override
        public Address address(long msgId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_address(this.nativeRef, msgId);
        }
        private native Address native_address(long _nativeRef, long msgId);

        @Override
        public String organization(long msgId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_organization(this.nativeRef, msgId);
        }
        private native String native_organization(long _nativeRef, long msgId);

        @Override
        public String avatarMimeType(long msgId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_avatarMimeType(this.nativeRef, msgId);
        }
        private native String native_avatarMimeType(long _nativeRef, long msgId);

        @Override
        public byte[] avatar(long msgId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_avatar(this.nativeRef, msgId);
        }
        private native byte[] native_avatar(long _nativeRef, long msgId);
    }
}
