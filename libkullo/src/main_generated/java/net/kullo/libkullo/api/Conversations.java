// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from conversations.djinni

package net.kullo.libkullo.api;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Conversations {
    /** Returns all conversation IDs in no particular order */
    @NonNull
    public abstract ArrayList<Long> all();

    /**
     * Returns the conversation with the given participants (excluding the local
     * user), or -1 if the conversation doesn't exist
     */
    public abstract long get(@NonNull HashSet<Address> participants);

    /**
     * Adds a new conversation with the given participants (excluding the local
     * user) if it doesn't exist yet. Returns its ID in either case. All
     * addresses should have been validated through Client::addressExistsAsync()
     * before passing them into add().
     */
    public abstract long add(@NonNull HashSet<Address> participants);

    /**
     * Triggers removal of the given conversation. This will also remove all
     * dependencies (messages, drafts, ...). Removal happens asynchronously after
     * calling this method.
     */
    public abstract void triggerRemoval(long convId);

    /** Returns the participants (excluding the local user) */
    @NonNull
    public abstract HashSet<Address> participants(long convId);

    /** Total number of messages */
    public abstract int totalMessages(long convId);

    /** Total number of unread messages */
    public abstract int unreadMessages(long convId);

    /** Total number of undone messages */
    public abstract int undoneMessages(long convId);

    /** Total number of incoming messages */
    public abstract int incomingMessages(long convId);

    /** Total number of outgoing messages */
    public abstract int outgoingMessages(long convId);

    /**
     * Timestamp of the latest message (for sorting). Returns the result of
     * emptyConversationTimestamp() if the conversation has no messages.
     */
    @NonNull
    public abstract DateTime latestMessageTimestamp(long convId);

    /** A date many years in the future, used in latestMessageTimestamp */
    @NonNull
    public static native DateTime emptyConversationTimestamp();

    private static final class CppProxy extends Conversations
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public ArrayList<Long> all()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_all(this.nativeRef);
        }
        private native ArrayList<Long> native_all(long _nativeRef);

        @Override
        public long get(HashSet<Address> participants)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_get(this.nativeRef, participants);
        }
        private native long native_get(long _nativeRef, HashSet<Address> participants);

        @Override
        public long add(HashSet<Address> participants)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_add(this.nativeRef, participants);
        }
        private native long native_add(long _nativeRef, HashSet<Address> participants);

        @Override
        public void triggerRemoval(long convId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_triggerRemoval(this.nativeRef, convId);
        }
        private native void native_triggerRemoval(long _nativeRef, long convId);

        @Override
        public HashSet<Address> participants(long convId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_participants(this.nativeRef, convId);
        }
        private native HashSet<Address> native_participants(long _nativeRef, long convId);

        @Override
        public int totalMessages(long convId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_totalMessages(this.nativeRef, convId);
        }
        private native int native_totalMessages(long _nativeRef, long convId);

        @Override
        public int unreadMessages(long convId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_unreadMessages(this.nativeRef, convId);
        }
        private native int native_unreadMessages(long _nativeRef, long convId);

        @Override
        public int undoneMessages(long convId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_undoneMessages(this.nativeRef, convId);
        }
        private native int native_undoneMessages(long _nativeRef, long convId);

        @Override
        public int incomingMessages(long convId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_incomingMessages(this.nativeRef, convId);
        }
        private native int native_incomingMessages(long _nativeRef, long convId);

        @Override
        public int outgoingMessages(long convId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_outgoingMessages(this.nativeRef, convId);
        }
        private native int native_outgoingMessages(long _nativeRef, long convId);

        @Override
        public DateTime latestMessageTimestamp(long convId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_latestMessageTimestamp(this.nativeRef, convId);
        }
        private native DateTime native_latestMessageTimestamp(long _nativeRef, long convId);
    }
}
