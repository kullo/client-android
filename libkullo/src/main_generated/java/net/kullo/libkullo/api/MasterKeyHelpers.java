// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from masterkey.djinni

package net.kullo.libkullo.api;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class MasterKeyHelpers {
    /** Returns null if pem is not well-formed */
    @Nullable
    public static native MasterKey createFromPem(@NonNull String pem);

    /** Returns null if dataBlocks is not well-formed */
    @Nullable
    public static native MasterKey createFromDataBlocks(@NonNull ArrayList<String> dataBlocks);

    /**
     * Validates a single block.
     * A block string is valid iff it contains exactly 6 digits
     * and fulfills the Luhn mod10 requirements
     */
    public static native boolean isValidBlock(@NonNull String block);

    /** Returns PEM formatted MasterKey */
    @NonNull
    public static native String toPem(@NonNull MasterKey masterKey);

    /**
     * Returns the MasterKey, encrypted with the given password.
     * Shouldn't be called from the UI thread as it is (deliberately) slow.
     */
    @NonNull
    public static native String encrypt(@NonNull String password, @NonNull MasterKey masterKey);

    /**
     * Decrypted an encrypted MasterKey, given a password.
     * Shouldn't be called from the UI thread as it is (deliberately) slow.
     * Returns null if given the wrong password.
     */
    @Nullable
    public static native MasterKey decrypt(@NonNull String password, @NonNull String encryptedMasterKey);

    private static final class CppProxy extends MasterKeyHelpers
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }
    }
}
