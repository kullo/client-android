// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from messages.djinni

package net.kullo.libkullo.api;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class MessageAttachments {
    /** Returns all attachments for the given message */
    public abstract ArrayList<Long> allForMessage(long msgId);

    /**
     * Returns true iff all attachments of the given message have been downloaded
     * (see Syncer for how to download attachments)
     */
    public abstract boolean allAttachmentsDownloaded(long msgId);

    /** Filename (e.g. "hello.png") */
    public abstract String filename(long msgId, long attId);

    /** MIME type (e.g. "image/png") */
    public abstract String mimeType(long msgId, long attId);

    /** File size in bytes */
    public abstract long size(long msgId, long attId);

    /** SHA-512 hash of the attachment contents */
    public abstract String hash(long msgId, long attId);

    /** Gets the content of the attachment as a BLOB */
    public abstract AsyncTask contentAsync(long msgId, long attId, MessageAttachmentsContentListener listener);

    /**
     * Saves the content of the attachment to a file. Path contains the absolute
     * path where the file should be saved, including the filename.
     */
    public abstract AsyncTask saveToAsync(long msgId, long attId, String path, MessageAttachmentsSaveToListener listener);

    private static final class CppProxy extends MessageAttachments
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public ArrayList<Long> allForMessage(long msgId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_allForMessage(this.nativeRef, msgId);
        }
        private native ArrayList<Long> native_allForMessage(long _nativeRef, long msgId);

        @Override
        public boolean allAttachmentsDownloaded(long msgId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_allAttachmentsDownloaded(this.nativeRef, msgId);
        }
        private native boolean native_allAttachmentsDownloaded(long _nativeRef, long msgId);

        @Override
        public String filename(long msgId, long attId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_filename(this.nativeRef, msgId, attId);
        }
        private native String native_filename(long _nativeRef, long msgId, long attId);

        @Override
        public String mimeType(long msgId, long attId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_mimeType(this.nativeRef, msgId, attId);
        }
        private native String native_mimeType(long _nativeRef, long msgId, long attId);

        @Override
        public long size(long msgId, long attId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_size(this.nativeRef, msgId, attId);
        }
        private native long native_size(long _nativeRef, long msgId, long attId);

        @Override
        public String hash(long msgId, long attId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_hash(this.nativeRef, msgId, attId);
        }
        private native String native_hash(long _nativeRef, long msgId, long attId);

        @Override
        public AsyncTask contentAsync(long msgId, long attId, MessageAttachmentsContentListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_contentAsync(this.nativeRef, msgId, attId, listener);
        }
        private native AsyncTask native_contentAsync(long _nativeRef, long msgId, long attId, MessageAttachmentsContentListener listener);

        @Override
        public AsyncTask saveToAsync(long msgId, long attId, String path, MessageAttachmentsSaveToListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_saveToAsync(this.nativeRef, msgId, attId, path, listener);
        }
        private native AsyncTask native_saveToAsync(long _nativeRef, long msgId, long attId, String path, MessageAttachmentsSaveToListener listener);
    }
}
