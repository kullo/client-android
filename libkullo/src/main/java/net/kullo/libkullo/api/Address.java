// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from api.djinni

package net.kullo.libkullo.api;

import java.util.concurrent.atomic.AtomicBoolean;

/** Represents a Kullo address */
public abstract class Address {
    /** Returns the whole address */
    public abstract String toString();

    /** Returns only the part left of the hash symbol */
    public abstract String localPart();

    /** Returns only the part right of the hash symbol */
    public abstract String domainPart();

    public abstract boolean isEqualTo(Address other);

    /** Returns true iff the left-hand side is alphabetically less than rhs */
    public abstract boolean isLessThan(Address rhs);

    /**
     * Creates a new Address and converts it to lower case.
     * Returns null if the address is not well-formed.
     */
    public static native Address create(String address);

    private static final class CppProxy extends Address
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public String toString()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_toString(this.nativeRef);
        }
        private native String native_toString(long _nativeRef);

        @Override
        public String localPart()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_localPart(this.nativeRef);
        }
        private native String native_localPart(long _nativeRef);

        @Override
        public String domainPart()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_domainPart(this.nativeRef);
        }
        private native String native_domainPart(long _nativeRef);

        @Override
        public boolean isEqualTo(Address other)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isEqualTo(this.nativeRef, other);
        }
        private native boolean native_isEqualTo(long _nativeRef, Address other);

        @Override
        public boolean isLessThan(Address rhs)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isLessThan(this.nativeRef, rhs);
        }
        private native boolean native_isLessThan(long _nativeRef, Address rhs);
    }
}
