// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from asynctask.djinni

package net.kullo.libkullo.api;

import java.util.concurrent.atomic.AtomicBoolean;

/**
 * Encapsulates an asynchronous task. Must live at least until the task finishes
 * or until it is canceled. If its destructor is called, it will call cancel().
 */
public abstract class AsyncTask {
    /**
     * Tells the asynchronous task to finish, but doesn't wait for termination.
     * Stops all callbacks, even if the task continues to run.
     */
    public abstract void cancel();

    /** Returns true iff the task has finished its work. */
    public abstract boolean isDone();

    /** Blocks until the task has finished executing. */
    public abstract void waitUntilDone();

    /**
     * Blocks until the task has finished executing or until the timeout has
     * expired. Returns false on timeout, true otherwise.
     */
    public abstract boolean waitForMs(int timeout);

    private static final class CppProxy extends AsyncTask
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void cancel()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_cancel(this.nativeRef);
        }
        private native void native_cancel(long _nativeRef);

        @Override
        public boolean isDone()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isDone(this.nativeRef);
        }
        private native boolean native_isDone(long _nativeRef);

        @Override
        public void waitUntilDone()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_waitUntilDone(this.nativeRef);
        }
        private native void native_waitUntilDone(long _nativeRef);

        @Override
        public boolean waitForMs(int timeout)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_waitForMs(this.nativeRef, timeout);
        }
        private native boolean native_waitForMs(long _nativeRef, int timeout);
    }
}
