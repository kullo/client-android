// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from messages.djinni

package net.kullo.libkullo.api;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Messages {
    /** Returns all messages for the given conversation */
    public abstract ArrayList<Long> allForConversation(long convId);

    /**
     * Returns the message id of the latest record for the given sender address.
     * Returns -1 for addresses without a sender record.
     */
    public abstract long latestForSender(Address address);

    /** Deletes a message */
    public abstract void remove(long msgId);

    public abstract long conversation(long msgId);

    public abstract ArrayList<Delivery> deliveryState(long msgId);

    public abstract boolean isRead(long msgId);

    public abstract void setRead(long msgId, boolean value);

    public abstract boolean isDone(long msgId);

    public abstract void setDone(long msgId, boolean value);

    public abstract DateTime dateSent(long msgId);

    public abstract DateTime dateReceived(long msgId);

    public abstract String text(long msgId);

    /** Escapes special characters and converts text links to 'a' tags */
    public abstract String textAsHtml(long msgId);

    public abstract String footer(long msgId);

    private static final class CppProxy extends Messages
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public ArrayList<Long> allForConversation(long convId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_allForConversation(this.nativeRef, convId);
        }
        private native ArrayList<Long> native_allForConversation(long _nativeRef, long convId);

        @Override
        public long latestForSender(Address address)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_latestForSender(this.nativeRef, address);
        }
        private native long native_latestForSender(long _nativeRef, Address address);

        @Override
        public void remove(long msgId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_remove(this.nativeRef, msgId);
        }
        private native void native_remove(long _nativeRef, long msgId);

        @Override
        public long conversation(long msgId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_conversation(this.nativeRef, msgId);
        }
        private native long native_conversation(long _nativeRef, long msgId);

        @Override
        public ArrayList<Delivery> deliveryState(long msgId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_deliveryState(this.nativeRef, msgId);
        }
        private native ArrayList<Delivery> native_deliveryState(long _nativeRef, long msgId);

        @Override
        public boolean isRead(long msgId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isRead(this.nativeRef, msgId);
        }
        private native boolean native_isRead(long _nativeRef, long msgId);

        @Override
        public void setRead(long msgId, boolean value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setRead(this.nativeRef, msgId, value);
        }
        private native void native_setRead(long _nativeRef, long msgId, boolean value);

        @Override
        public boolean isDone(long msgId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isDone(this.nativeRef, msgId);
        }
        private native boolean native_isDone(long _nativeRef, long msgId);

        @Override
        public void setDone(long msgId, boolean value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setDone(this.nativeRef, msgId, value);
        }
        private native void native_setDone(long _nativeRef, long msgId, boolean value);

        @Override
        public DateTime dateSent(long msgId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_dateSent(this.nativeRef, msgId);
        }
        private native DateTime native_dateSent(long _nativeRef, long msgId);

        @Override
        public DateTime dateReceived(long msgId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_dateReceived(this.nativeRef, msgId);
        }
        private native DateTime native_dateReceived(long _nativeRef, long msgId);

        @Override
        public String text(long msgId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_text(this.nativeRef, msgId);
        }
        private native String native_text(long _nativeRef, long msgId);

        @Override
        public String textAsHtml(long msgId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_textAsHtml(this.nativeRef, msgId);
        }
        private native String native_textAsHtml(long _nativeRef, long msgId);

        @Override
        public String footer(long msgId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_footer(this.nativeRef, msgId);
        }
        private native String native_footer(long _nativeRef, long msgId);
    }
}
